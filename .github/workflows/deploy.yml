---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to release
    branches:
      - release
  # allow manual triggers for now too
  workflow_dispatch:
    manual: true

# Remember to set the following secrets in your repository's settings:
# https://github.com/your_username/itu-minitwit-ci/settings/secrets/actions
# DOCKER_USERNAME
# DOCKER_PASSWORD
# SSH_USER
# SSH_KEY
# SSH_HOST

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push maxitwit server
        uses: docker/build-push-action@v2
        with:
          context: .
          target: 'production'
          file: ./Dockerfile.app
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/maxitwitserver:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/maxitwitserver:serverbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/maxitwitserver:serverbuildcache,mode=max

      - name: Build and push minitwit api
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.api
          target: 'production'
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/maxitwitapi:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/maxitwitapi:apibuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/maxitwitapi:apibuildcache,mode=max

      - name: Build and push minitwit test
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.test
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/maxitwittest:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/maxitwittest:testbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/maxitwittest:testbuildcache,mode=max
      
      - name: Build and push fluentd image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.fluentd
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/fluentd:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/fluentd:testbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/fluentd:testbuildcache,mode=max

      - name: Test maxitwit
        run: |
          docker build -t $DOCKER_USERNAME/maxitwittest -f Dockerfile.test .
          yes 2>/dev/null | docker compose -f tests_compose.yaml up --build -d
          chmod +x ./wait_for_compose.sh
          ./wait_for_compose.sh
          docker run --rm --network=maxitwit-test $DOCKER_USERNAME/maxitwittest
        env:
          TARGET: production
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}

      - name: Provision enviroment variables to worker1 node
        run: >
          ssh $SSH_USER@$SSH_HOST_WORKER1
          -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no
          "export DOCKER_USERNAME=$DOCKER_USERNAME;
          export SESSION_SECRET=$SESSION_SECRET;
          export DATABASE_URL=$DATABASE_URL;"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST_WORKER1: ${{ secrets.SSH_HOST_WORKER1 }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Provision enviroment variables to worker2 node
        run: >
          ssh $SSH_USER@$SSH_HOST_WORKER2
          -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no
          "export DOCKER_USERNAME=$DOCKER_USERNAME;
          export SESSION_SECRET=$SESSION_SECRET;
          export DATABASE_URL=$DATABASE_URL;"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST_WORKER2: ${{ secrets.SSH_HOST_WORKER2 }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy to server
        run: >
          ssh $SSH_USER@$SSH_HOST
          -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no
          "export DOCKER_USERNAME=$DOCKER_USERNAME;
          export SESSION_SECRET=$SESSION_SECRET;
          export DATABASE_URL=$DATABASE_URL;
          /vagrant/remote_files/deploy.sh"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
