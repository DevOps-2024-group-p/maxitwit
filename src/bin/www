#!/usr/bin/env node

const { on } = require('events');
var { app, api } = require('../app');
var debug = require('debug')('neotwit:server');
var http = require('http');

// Get port from environment and store in Express.

const PORT_APP = normalizePort(process.env.PORT || '3000');
const PORT_API = normalizePort(process.env.PORT || '3001');

app.set('port', PORT_APP);
api.set('port', PORT_API);

const SERVER_APP = http.createServer(app);
const SERVER_API = http.createServer(api);

SERVER_APP.listen(PORT_APP);
SERVER_APP.on('error', onError);
SERVER_APP.on('listening', () => onListening(SERVER_APP));

SERVER_API.listen(PORT_API)
SERVER_API.on('listening', () => onListening(SERVER_API));

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening(server) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
